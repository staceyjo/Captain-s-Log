The Captains Log
Express uses the HTTP Method and the Pathof the HTTP request to match a route defined in the application

res.render()- Render a view template and send the resulting HTML to the browser.
res.redirect()- Tell the browser to issue another GETrequest.
res.json()- Send a JSON response (used when we build an API).

Set up:
HTTP Action	    CRUD Operator       What it does
GET	            Read                to view or read from a data source, like when you pull information from an api
POST	        Create              creates a new entry in a database by sending information we POST
PUT	            Update              sending data, updating an existing entry, target by id
DELETE	        Delete              deletes something from our data source

1. Copy/paste this table into a fresh file
Restful Routes
#	Action	    URL	            HTTP Verb	jsx view filename	mongoose method         what it does
1	Index	    /logs/ or /logs	GET	        Index.jsx	        Log.find()              returns a collection of resources
2	Show        /logs/:id       GET         Show.jsx            Log.findById()          returns an existing resource
3	New	        /logs/new	    GET	        New.jsx	            none                    returns a new form to create a new resource
4	Create	    /logs/ or /logs	POST	    	                Log.create(req.body)    saves a new resource to the database
5	Edit        /logs/:id/edit  GET         Edit.jsx            Log.findById()          returns a form to edit an existing resource
6	Update      /logs/:id       PUT/PATCH   Index.jsx           Log.findByIdAndUpdate() updated an existing resource 
7	Destroy     /logs/:id       DELETE      Index.jsx           Log.findByIdAndDelete() deletes an existing resource in the database

Models
data (javascript variables)

Views
how the data is displayed to the user (HTML)

Controllers
the glue that connects the models with the views

// seeding
Mongoose is basically the communicator between Node js and Mongo DB.
Mongoose can help you create a connection to your Database through Node.
Once you create your Model, defining how you want your Mongo collection should be, then you should be seeding the collection but from a separate file. 


Connect to MongoDB Database with Mongoose and MongoDB Atlas:
- define Mongoose schemas, which are then compiled using the mongoose.model method into Models
- use a Model to perform all CRUD for a given MongoDB collection.

If you finish lab early consider:
- adding some CSS and practice styling your app
- try working with the date object! Try to make it look human readable in HTML.

SUPER BONUS:
 - Add a second model for comments:
 - it should have the name of the person who wrote it
 - and some text for the comment (maybe time stamps?). 
 - This model should 'belong' to the post, 
 - the data should be related in some way. 
 - Do your own research on how to set up a one-to-many relationship 
 - (one post can have many comments, one comment only belongs to one post), 
 - in MongoDB. Use Mongo Documents, Google.